<!DOCTYPE html>
<html>

<head>
  <title>
    <%=typeof title == 'undefined' ? 'NotifyMe' : title%>
  </title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


  <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <!--STYLES-->
  <link rel="stylesheet" href="/styles/importer.css">
  <link rel="stylesheet" href="/styles/materialize.css">
  <link rel="stylesheet" href="/styles/overrides.css">
  <!--STYLES END-->
</head>

<body>
  <header>
    <div class="navbar-fixed">
      <nav>
        <div class="nav-wrapper">
          <a href="/" class="brand-logo center hide-on-small-only">
            <img src="/images/logo.png">
          </a>
          <a href="/" class="brand-logo hide-on-med-and-up">
            <img src="/images/logo-mobile.png">
          </a>
        </div>
      </nav>
    </div>
  </header>
  <main>
    <%- body %>
  </main>
  <footer class="page-footer">
    <div class="container">
      <div class="row">
        <div class="col s6 left-align">
          <a href="/policy">Policy</a>
        </div>
        <div class="col s6 right-align">
          <a href="/terms">Terms of use</a>
        </div>
      </div>
    </div>
    <div class="footer-copyright">
      <div class="container">
        Â© 2017 NotifyMe, All rights reserved.
      </div>
    </div>
  </footer>
  <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

  <!--TEMPLATES-->
  
  <!--TEMPLATES END-->


  <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

  <!--SCRIPTS-->
  <script src="/vendors/jquery/dist/jquery.min.js"></script>
  <script src="/vendors/materialize/js/collapsible.js"></script>
  <!--SCRIPTS END-->

  <script>
    $(document).ready(function () {
      $('.collapsible').collapsible({
        accordion: true,
      });
    });
  </script>
</body>

</html>